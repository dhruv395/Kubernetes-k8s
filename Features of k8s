- Automatic bin packing
- Service discovery and load balancing
- Storage orchestration
- Self healing
- Automated rollouts and rollbacks
- Secret & configuration management
- Batch execution
- Horizontal scaling

### Automatic bin packing
Automatically places containers based on their resource requirements 
like CPU & Memory (RAM), 
while not sacrificing availability
Saves resources

###Service discover & load balancing
Kubernetes gives Pods their own IP addresses and a single DNS name for a set of Pods, and can load-balance across them
With this system, Kubernetes has control over network and communication between pods and can load load balance across them

###Storage Orchestration
Kubernetes allows to mount the storage system of your choice
Local
Cloud (AWS)
Network (NFS)

###Self-healing
If a container fails - restarts container
If node dies - replaces and reschedule containers on other nodes
If container does not respond to user defined health check - kills container
This is taken care by Kubernetes  ReplicationController
####Secret & configuration management:
Kubernetes manages secrets and configuration details for an application separately from the container image,
Deploy and update secrets and application configuration without rebuilding your image and without exposing secrets in your stack configuration.

###Automated rollouts and rollbacks
Rollout: deploy changes to the application or its configuration
Rollback: revert the changes & restore to the previous state
Kubernetes ensures there is no downtime during this process

###Batch execution
Kubernetes supports batch execution, long-running jobs, and replaces failed containers

####Horizontal scaling
In Kubernetes, we can scale up or down the containers 
 - using commands
 - from the dashboard (kubernetes ui)
 - automatically based on CPU usage
