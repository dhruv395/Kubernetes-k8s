Online k8s labs
  - kubernetes playground
  - play with k8s
  - play with kubernetes classroom
  
Cloud bas k8s service
  - GKE: Google k8s engine
  - AKS: Azure k8s service
  - EKS: Amazon k8s service
  
K8s installation tools:
  - Minikube: Minikube is a tool that makes it easy to run Kubernetes locally. Minikube runs a single-node Kubernetes cluster inside a
              VM on your laptop for users looking to try out Kubernetes or develop with it day-to-day.
 
 - kubeadm: 
          1. Launched 4 centos vms's with minimum 2 CPU and 2GB RAM and run below commands in all vms
      
      systemctl status firewalld
      systemctlstop firewalld
      systemctl stop firewalld
      systemctl status firewalld
      systemctl disable firewalld
      getenforce
     setenforce 0
     sed -i 's/enforcing/disabled/g' /etc/selinux/config
     
     2. Now add the k8s repo to Download and install docker, kubectl, kubelet and kubeadm in all master and worker nodes.
        
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF

sudo yum update -y
sudo yum install -y docker kubelet kubeadm kubectl --disableexcludes=kubernetes

##start and enable kubectl and docker
systemctl enable docker && systemctl start docker
systemctl enable kubelet && systemctl start kubelet

## for centos and rhel
cat <<EOF > /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

sysctl net.bridge.bridge-nf-call-iptables=1
sysctl net.ipv4.ip_forward=1
sysctl ==system
echo "1" > /proc/sys/net/ipv4/ip_forward

###restart systemd daemon and kubelet service with the commands
systemctl daemon reload
systemctl reload kubelet
       
